http://anti-code.com/blog/5-coolest-jsfiddles/

https://chrome.google.com/webstore/detail/dhfmbjpmakffkpepaeeoenabldonnlee/publish-delayed

First login wth chrome webstore username and password

chrome webstore username: zubayer.extension
password: same as MUN password

then visit published chrome-extension url:
https://chrome.google.com/webstore/detail/minishortcut/dhfmbjpmakffkpepaeeoenabldonnlee?hl=en

previous allowed_origins
"chrome-extension://nfkpmkbfmgbfongnfdihnmapmcdngcbd/"



var polly = new AWS.Polly();


const say = (msg, res) => {
        const synthCallback = (err, data) => {
          if (err) debug(err.stack); // an error occurred
          const bufferStream = new stream.PassThrough();
          // Write your buffer
          bufferStream.end(new Buffer(data.AudioStream));
          res.set({
                'Content-Type': 'audio/mpeg',
          });
          bufferStream.on('error', bufferError => {
                debug(bufferError);
                res.status(400).end();
          });
          // Pipe it to something else  (i.e. stdout)
          bufferStream.pipe(res);
        };
        polly.synthesizeSpeech(msg, synthCallback);
  };

var request = require('request'),
        _self = function (req, res) {
                let Text = req.body.text;
                say({
                        OutputFormat: 'mp3', // You can also specify pcm or ogg_vorbis formats.
                        Text,
                        VoiceId: "Salli", // Specify the voice ID / name from the previous step.
                }, res);
        }
        
        
        
        
        
        
        
        
        
        var pollyHandler = (function () {
    var elementId = "audioElement" + new Date().valueOf().toString();
    var audioElement = document.createElement('audio'),
        spokenText = "",
        spokenFailed = false, 
        isSpeaking = false,
        errorListener = function (event){
            if (audioElement.error.code == 4){
                spokenFailed = true;
                pollyHandler.speak(spokenText);
            }
        };
    audioElement.setAttribute("id", elementId);
    document.body.appendChild(audioElement);	
    audioElement.addEventListener("ended", function () {
        audioElement.removeEventListener('error', errorListener);
        isSpeaking = false;
        audioElement.currentTime = 0;
        audioElement.src = undefined;
    });

    return {
        speak: function speak(text) {
            if (spokenFailed){
                self.port.emit("speak-failure", text);
            } else {
                spokenText = text;
                self.postMessage(text);
            }
        },
        play: function play(Data) {
            audioElement.addEventListener('error', errorListener)
            isSpeaking = true;
            audioElement.src = "data:audio/mp3;base64,"+Data
            audioElement.play();
        },
        stop: function stop() {				
            if(audioElement){
                audioElement.removeEventListener('error', errorListener);
                isSpeaking = false;
                audioElement.pause();
                audioElement.currentTime = 0;
                audioElement.src = undefined;
            }
        },
        toggle: function toggle() {		
            if(isSpeaking){
                audioElement.pause();
                isSpeaking = false;
            } else {
                audioElement.play();
                isSpeaking = true
            }
        }
    }
})()

self.port.on("play", pollyHandler.play);
self.port.on("stop", pollyHandler.stop);
self.port.on("toggle", pollyHandler.toggle);

